<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	도메인마다 namespace 를 구현하고
	각각의 crud 에 대한 id 설정 후 쿼리 작성
-->

<mapper namespace="com.singer.mappers.SB01">		
		<insert id="insert"  parameterType="com.singer.domain.entity.sb.SB01Entity">
			<selectKey  keyProperty="seq"  resultType="java.lang.Integer" order="AFTER">
   			 SELECT SEQ_SB01.CURRVAL FROM DUAL
  			</selectKey>
			insert into SB01 (seq, title, text, userid, regdate , videobool)
			values (SEQ_SB01.NEXTVAL, #{title}, #{text}, #{userid}, #{regdate}, #{videobool, typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler}) 
			
		</insert>
		
		<update id="update" parameterType="com.singer.domain.entity.sb.SB01Entity">
			update SB01 
			set title = #{title},
				text = #{text}
			where seq = #{seq}
		</update>
		
		<insert id="like" parameterType="com.singer.domain.entity.sb.SB01Entity">
			<selectKey  keyProperty="good"  resultType="java.lang.Integer" order="AFTER">
		 		select good from SB01 where seq = #{seq}
		 	</selectKey>
			update SB01 
			set good = (select good from SB01 where seq = #{seq}) + 1
			where seq = #{seq}
		</insert>
		
		<insert id="hate" parameterType="com.singer.domain.entity.sb.SB01Entity">
			<selectKey  keyProperty="good"  resultType="java.lang.Integer" order="AFTER">
		 		select good from SB01 where seq = #{seq}
		 	</selectKey>
			update SB01 
			set good = (select good from SB01 where seq = #{seq}) - 1 
			where seq = #{seq}
		</insert>
		
		<update id="click" parameterType="com.singer.domain.entity.sb.SB01Entity">
			update SB01
			set hit = (select hit 
				from SB01
				where seq = #{seq}
			) + 1
			where seq = #{seq}
		</update>
		
		<resultMap type="com.singer.domain.entity.sb.SB01Entity" id="SB01EntityResult">
			<result column="seq" property="seq"/>
			<result column="title" property="title"/>
			<result column="text" property="text"/>
			<result column="userid" property="userid"/>
			<result column="regdate" property="regdate"/>
			<result column="hit" property="hit"/>
			<result column="good" property="good"/>
			<result column="goodlog" property="goodlog"/>
			<result column="hatelog" property="hatelog"/>
			<result column="videobool" property="videobool" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/>
		</resultMap>
		
		<select id="selectOne" resultMap="SB01EntityResult" parameterType="com.singer.domain.entity.sb.SB01Entity">
		select 
    		S1.seq as seq,
    		S1.title as title, 
   			S1.text as text, 
  			S1.userid as userid,
    		S1.regdate as regdate,
    		S1.hit as hit, 
   			S1.good as good,
   			S1.videobool as videobool,
    		SL1.goodlog as goodlog,
    		SL1.hatelog  as hatelog
    		from SB01 S1
    		left outer join(
     		  select *
       		from SBG1
       		where seq = #{seq} and
      		sessionid = #{sessionid}
   		 ) SL1
  		on (S1.seq = SL1.seq)
  		where S1.seq = #{seq}
		</select>
		
		<select id="checkUser" resultType="com.singer.domain.entity.sb.SB01Entity" parameterType="com.singer.domain.entity.sb.SB01Entity">
		select 
    		S1.seq as seq,
    		S1.userid as userid
    		from SB01 S1
		where S1.seq = #{seq}
		</select>
		
		<select id="selectCount" resultType="com.singer.domain.entity.sb.SB01Entity">
		<![CDATA[
			with tot as (select count(*) as cnt /*+ INDEX_FFS(SB01 PK_SB01)*/
  					from SB01 )
			select cnt as totCnt from tot
		]]>
		</select>
		
		<select id="select" resultType="com.singer.domain.entity.sb.SB01Entity"  parameterType="com.singer.domain.entity.sb.SB01Entity">
		<![CDATA[
			select S1.*,
				(select count(*) 
        			from SB02 S2
        			where S1.seq = S2.seq01
        			and S2.parents = 0
      			) as reply
				 from (
					select /*+ index_desc(SB01 PK_SB01)*/
					rownum as rown,
					seq as seq,
					title as title, 
					text as text, 
					userid as userid,  
					regdate as regdate,
					hit as hit, 
					good as good
			 	from SB01 
			 	where rownum <= #{endRownum} 
				) S1 where S1.rown  >= #{startRownum} 
  			]]>
		</select>
		
		<select id="selectFind" resultType="com.singer.domain.entity.sb.SB01Entity"  parameterType="com.singer.domain.entity.sb.SB01Entity">
			select T.*,
  				(select count(*) 
        			from SB02 s2
        			where T.seq = s2.seq01
        			and s2.parents = 0
      			) as reply
      			from
  				(select
					seq as seq,
					title as title, 
					text as text, 
					userid as userid,  
					regdate as regdate,
					hit as hit, 
					good as good
			 	from SB01 
  				where 1 = 1
		 		 <if test="userid != null">
			 		and userid like #{userid} || '%'
			 	</if>
			 	<if test="title != null">
			 		and title like #{title} || '%'
			 	</if>
			 	order by regdate desc
  				) T
		</select>
		
		
		<delete id="delete" parameterType="com.singer.domain.entity.sb.SB01Entity">
			delete from SB01
			where seq = #{seq}
		</delete>
		
		<insert id="insertVideo" parameterType="com.singer.domain.entity.sb.SB01Entity">
				insert into SBV1 (seq, regdate, videopath) values(#{seq}, #{regdate}, #{videopath})
		</insert>
		
		<select id="selectVideo" parameterType="com.singer.domain.entity.sb.SB01Entity" resultType="java.lang.String">
			select videopath from SBV1 where seq  = #{seq}
		</select>
		
		<update id="updateVideo" parameterType="com.singer.domain.entity.sb.SB01Entity">
			update SBV1
				set regdate = #{regdate},
  				videopath = #{videopath}
  				where seq = #{seq}
		</update>
		
		<update id="likelog" parameterType="com.singer.domain.entity.sb.SB01Entity">
			merge into SBG1 S1
				using dual
				on (
				S1.seq = #{seq}
				and S1.sessionid = #{sessionid})
			when matched then
				update set S1.datelog = #{datelog},
  					S1.goodlog = 'Y'
			when not matched then
				insert (S1.seq, S1.sessionid, S1.datelog, S1.goodlog ) values(#{seq}, #{sessionid}, #{datelog} , 'Y')
		</update>
		
		<update id="hatelog" parameterType="com.singer.domain.entity.sb.SB01Entity">
			merge into SBG1 S1
				using dual
				on (
				S1.seq = #{seq}
				and S1.sessionid = #{sessionid})
			when matched then
				update set S1.datelog = #{datelog},
  					S1.hatelog = 'Y'
			when not matched then
				insert (S1.seq, S1.sessionid, S1.datelog, S1.hatelog ) values(#{seq}, #{sessionid}, #{datelog} , 'Y')
		</update>
</mapper>