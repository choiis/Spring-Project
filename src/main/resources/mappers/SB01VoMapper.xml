<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	도메인마다 namespace 를 구현하고
	각각의 crud 에 대한 id 설정 후 쿼리 작성
-->

<mapper namespace="com.singer.mappers.SB01">		
		<insert id="insert"  parameterType="com.singer.vo.SB01Vo">
			insert into SB01 (seq, title, text, userid, regdate)
			values (SEQ_SB01.NEXTVAL, #{title}, #{text}, #{userid}, #{regdate}) 
		</insert>
		
		<update id="update" parameterType="com.singer.vo.SB01Vo">
			update SB01 
			set title = #{title},
				text = #{text}
			where seq = #{seq}
		</update>
		
		<update id="like" parameterType="com.singer.vo.SB01Vo">
			update SB01 
			set good = #{good} + 1
			where seq = #{seq}
			and title = #{title}
		</update>
		
		<update id="hate" parameterType="com.singer.vo.SB01Vo">
			update SB01 
			set good = #{good} - 1
			where seq = #{seq}
			and title = #{title}
		</update>
		
		<update id="click" parameterType="com.singer.vo.SB01Vo">
			update SB01
			set hit = #{hit} + 1
			where seq = #{seq}
		</update>
		
		<select id="selectOne" resultType="com.singer.vo.SB01Vo" parameterType="com.singer.vo.SB01Vo">	
		select 
    		S1.seq as seq,
    		S1.title as title, 
   			S1.text as text, 
  			S1.userid as userid,
    		S1.regdate as regdate,
    		S1.hit as hit, 
   			S1.good as good,
    		SL1.goodlog as goodlog,
    		SL1.hatelog  as hatelog
    		from SB01 S1
    		left outer join(
     		  select *
       		from SG01
       		where btype = 'SB01' and
       		seq = #{seq} and
      		sessionid = #{sessionid}
   		 ) SL1
  		on (S1.seq = SL1.seq)
  		where S1.seq = #{seq}
		</select>
		
		<select id="select" resultType="com.singer.vo.SB01Vo"  parameterType="com.singer.vo.SB01Vo">
		select S1.*
			 from (
			 
			select 
				rownum as rown,
				s1.seq as seq,
				s1.title as title, 
				s1.text as text, 
				s1.userid as userid,  
				s1.regdate as regdate,
				s1.hit as hit, 
				s1.good as good,
				count(*) over() as totCnt,
        		(select count(*) 
        				from SB02 s2
        			where s1.seq = s2.seq01
        		) as reply
			 from SB01 s1
			 where 1=1
			 <if test="title != null">
			 	and title like #{title} || '%'
			 </if>
			 <if test="userid != null">
			 	and userid = #{userid}
			 </if>
			 order by seq desc , regdate desc
			) S1 where S1.rown between 
		#{startRownum} + 1 and #{endRownum}
		</select>
		
		<delete id="delete" parameterType="com.singer.vo.SB01Vo">
			delete from SB01
			where seq = #{seq}
			and title = #{title}
		</delete>
		
		<update id="insertVideo" parameterType="java.util.HashMap">
			update SB01 
			set video = #{video}
			where title = #{title}
			and userid = #{userid}
		</update>
		
		<select id="selectVideo" parameterType="com.singer.vo.SB01Vo" resultType="java.util.Map">
			select video from SB01 
			where seq = #{seq}
		</select>
		
		<update id="likelog" parameterType="com.singer.vo.SB01Vo">
			merge into SG01 S1
				using dual
				on (
				S1.btype = 'SB01'
				and S1.seq = #{seq}
				and S1.sessionid = #{sessionid})
			when matched then
				update set S1.datelog = #{datelog},
  					S1.goodlog = 'Y'
			when not matched then
				insert (S1.btype, S1.seq, S1.sessionid, S1.datelog, S1.goodlog ) values('SB01' ,#{seq}, #{sessionid}, #{datelog} , 'Y')
		</update>
		
		<update id="hatelog" parameterType="com.singer.vo.SB01Vo">
			merge into SG01 S1
				using dual
				on (
				S1.btype = 'SB01'
				and S1.seq = #{seq}
				and S1.sessionid = #{sessionid})
			when matched then
				update set S1.datelog = #{datelog},
  					S1.hatelog = 'Y'
			when not matched then
				insert (S1.btype, S1.seq, S1.sessionid, S1.datelog, S1.hatelog ) values('SB01' ,#{seq}, #{sessionid}, #{datelog} , 'Y')
		</update>
</mapper>